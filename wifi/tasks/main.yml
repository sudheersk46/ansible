




- name: test script
  shell: " ls -l /etc/NetworkManager/dispatcher.d/ssid | grep -o ssid"
  register: copys
  ignore_errors: yes
- debug: var=copys.stdout 
  

- name: setting-new-host
  block:
   - name: copy hostname script
     copy: src=hostname dest=/tmp/hostname
   - name: applyin script
     shell: bash /tmp/hostname {{ getting_hostname }}
   - name: del hostname script
     shell: rm /tmp/hostname
  when: set_new_hostname=="yes"  
  tags: set-host-name
     




- name: copy script
  copy: src=ssid dest=/tmp/ssid 
  register: cop
  ignore_errors: yes
  when: wifi_copy_check=="yes"
#- debug: var=cop
#- debug: {"msg": "copying files"}
  

  



#  when: cop.changed
  tags: filec 
  

- name: copy 18 script
  copy: src=18_swap_wallpaper dest=/tmp/18_swap_wallpaper
  register: bionic
  ignore_errors: yes
  when: install_check=="install18"
- debug: var=bionic
#- debug: {"msg": "copying files"}
  tags: file18
#  when: cop.changed

- name: copy 14-16 script
  copy: src=14-16-wallpaper dest=/tmp/14-16-wallpaper
  register: xenial
  ignore_errors: yes
  when: install_check=="install14"
- debug: var=xenial.stdout
#- debug: {"msg": "copying files"}
  tags: file14



- name: running wifi script
  shell: bash /tmp/ssid
  register: run
  ignore_errors: yes
  when: cop.changed
#- debug: var=cop.changed
- debug: msg="{{ run }}"
  ignore_errors: yes
  tags: script

- name: delete file after copy
  shell: rm /tmp/ssid
  retries: 3
  delay: 10
  ignore_errors: yes
  when: cop.changed

- name: disable wifi-restriction
  lineinfile:
   path: /etc/NetworkManager/dispatcher.d/ssid
   regexp: 'bash'
   line: '        # bash /root/network'
  ignore_errors: yes
  when: wifi_check=="yes"
  tags: enable_wifi

- name: enable wifi-restriction
  lineinfile:
   path: /etc/NetworkManager/dispatcher.d/ssid
   regexp: '# bash'
   line: '        bash /root/network'
  ignore_errors: yes
  when: wifi_check=="no"
  tags: disable_wifi
  
  

- name: running 18 script
  shell: bash /tmp/18_swap_wallpaper
  register: fdisk
  ignore_errors: yes
  when: bionic.changed
- debug: var=bionic.changed
- debug: msg="{{ fdisk}}"
#- debug: msg="{{ facter_os.distro.codename }}"
#- debug: var=facter_os.distro.codename 
  tags: factss

- name: delete 18_wallapaer file after copy
  shell: rm /tmp/18_swap_wallpaper
  retries: 3
  delay: 10
  ignore_errors: yes
  when: bionic.changed
  tags: del-18script

- name: running 14-16 script
  shell: bash /tmp/14-16-wallpaper
  register: fdisk
  ignore_errors: yes
  when: xenial.changed
- debug: var=xenial.changed.stdout
- debug: msg=" wallpaper"
#- debug: msg="{{ facter_os.distro.codename }}"
#- debug: var=facter_os.distro.codename 
  tags: 14script

- name: delete 14-16-wallapaer file after copy
  shell: rm /tmp/14-16-wallpaper
  retries: 3
  delay: 10
  ignore_errors: yes
  when: xenial.changed 
  tags: del-14script

- name: copy usb script
  block:
  - name: disable usb script 1
    copy: src=usb-allow dest=/tmp/usb-allow
  - name: disable usb script 2
    shell: bash /tmp/usb-allow 2
    register: usbc
    ignore_errors: yes
  when: usb_check=="no"
- debug: var=usbc
#- debug: {"msg": "copying files"}
  tags: usbdis

#- name: run disabling usb script
#  shell: bash /tmp/usb_allow 2
#  register: usben
#  ignore_errors: yes
#  when: usbc.changed
#- debug: var=usben
#- debug: {"msg": "copying files"}
#  tags: usbena

- name: run enable usb script
  block:
  - name: enable usb script 2
    copy: src=usb-allow dest=/tmp/usb-allow
  - name: enable usb script 2
    shell: bash /tmp/usb-allow 1
    register: usben
    ignore_errors: yes
  when: usb_check=="yes"
- debug: var=usben
#- debug: {"msg": "copying files"}
  tags: usbena

- name: del usb script
  shell: rm /tmp/usb-allow
  register: usbdi
  ignore_errors: yes
  when: usbc.changed or usben.changed
- debug: var=usbdi
#- debug: {"msg": "copying files"}
  tags: usbdel


- name: setting-swapfile
  block:
   - name: copy swap script
     copy: src=swapfile dest=/tmp/swapfile
   - name: applyin script
     shell: bash /tmp/swapfile 
#   - wait_for: timeout=200
   - name: del swapfile script
     shell: rm /tmp/swapfile
  when: set_swapfile=="yes"  
  tags: set-swapfile-script

#- name: gather facts
#- debug: >
#          msg="swap = {{ ansible_architecture ansible_bios_date }}  
#          verison = {{ ansible_distribution_version }} 
#          hostname = {{ ansible_nodename }} "

- name: gathering facts
  block:
  - name: gfacts1
    shell: "dmidecode -s system-version"
    register: version
  - name: gafcts2
    shell: "dmidecode -s system-serial-number"
    register: serialno
  - name: gfacts3
    shell: "lshw -short | grep -i processor | head -n 1  | awk '{print $3,$4,$5,$6}'"
    register: processorinfo
  - name: gfacfts4
    shell: "who | head -n 1 | cut -d ' ' -f 1"
    register: userlog
  - name: storage
    shell:  "lshw -short | grep -i sda | head -n 1  | awk '{print $4,$5,$6}' "
    register: hdds
  - name: swapmem
    setup: filter='ansible_swaptotal_mb'
  - name: getting-newhost
    setup: filter='ansible_nodename'
  - debug:
     msg:
      - "Username={{ userlog.stdout }}"
      - "Model={{ version.stdout }}"
      - "SerialNo={{ serialno.stdout }}"
      - "Processor={{ processorinfo.stdout }}"
      - "Architecture = {{ ansible_architecture }}"
      - "Bios date =  {{ ansible_bios_date }}"
      - "Ram = {{ ansible_memtotal_mb }}mb"
      - "Release= {{ ansible_lsb.release }}"
      - "kernel = {{ ansible_kernel }}"
      - "swap = {{  ansible_swaptotal_mb }}mb"
      - "verison = {{ ansible_distribution_version }}"
      - "hostname = {{ ansible_nodename }}"
      - "Hdd model = {{ ansible_devices.sda.model }}"
      - "Hdd size = {{ hdds.stdout }}"
      - "new_host= {{ getting_hostname }}"
#      - "uuids = {{ ansible_device_links.uuids }}"
#      - "processor= {{ansible_processor }}"
  - name: output facts
    shell: |
           echo >> /home/testDocuments/ansible-reports 
           echo ----date and time--- >> /home/testDocuments/ansible-reports
           date >> /home/testDocuments/ansible-reports
           echo  Username={{ userlog.stdout }} \
           Model={{ version.stdout }} \
           SerialNo={{ serialno.stdout }}  \
           Architecture={{ ansible_architecture }} \
           Bios date= {{ ansible_bios_date }} \
           Ram={{ ansible_memtotal_mb }}mb \
           Release={{ ansible_lsb.release }} \
           kernel={{ ansible_kernel }} \
           swap={{  ansible_swaptotal_mb }}mb \
           verison={{ ansible_distribution_version }} \
           hostname={{ ansible_nodename }} \
           Hdd-model={{ ansible_devices.sda.model }} \ 
           Hdd-size={{ hdds.stdout }} >> /home/test/Documents/ansible-reports 
    
#           Processor={{ processorinfo.stdout }}   
    ignore_errors: yes
    delegate_to: 127.0.0.1
#  - name: local_action
#    local_action:  command  "echo dkedkec >> /home/testDocuments/ansible-reports "
#                  command " echo ----date and time--- >> /home/testDocuments/ansible-reports" 
#                  "command date >> /home/testDocuments/ansible-reports    "
#                  "command echo  Username={{ userlog.stdout }} \            
#                   Hdd model={{ ansible_devices.sda.model }} >> /home/testDocuments/ansible-reports "
#  - name: local_action2
#    local_action: 
#                   "shell  echo ekmke  >> /home/testDocuments/ansible-reports "
#                   " shell  echo ----date and time--- >> /home/testDocuments/ansible-reports "
##                   " shell date >> /home/testDocuments/ansible-reports "
#                   " shell echo  Username={{ userlog.stdout }} >> /home/testDocuments/ansible-reports  "




  when: output_gfacts=="yes"                   
  tags: facts  


- name: check scripts application status
  block:
  - name: check usb stat
    shell: "ls /root/ | grep -o usb-storage"
    ignore_errors: yes
    register: usb_stat
  - name: check wifi stat
    shell: "cat /etc/NetworkManager/dispatcher.d/ssid | grep -o '# bash'"
    ignore_errors: yes
    register: wifi_stat
  - name: check wifi stat1
    shell: "ls /etc/NetworkManager/dispatcher.d/ssid | grep -o 'ssid'"
    ignore_errors: yes
    register: wifi_stat_1
  - name: print wifi  file check
    debug: msg="Wifi policy not installed"
    ignore_errors: yes
    when: wifi_stat_1.stdout==""
#  - name: debug-enable-status
  - debug: msg="usb enabled"
    when: usb_stat.stdout==""
#  - name: debug-disable-status
  - debug: msg="usb disabled"
    when: usb_stat.stdout=="usb-storage"
#  - name: wifi-enable-status
#  - debug: var=wifi_stat.stdout
  - debug: msg="wifi enabled"
    when: wifi_stat.stdout=="# bash" or wifi_stat_1.stdout=="" 
#  - name: wifi-disable-status
  - debug: msg="wifi disabled"
    when: wifi_stat.stdout=="" and wifi_stat_1.stdout=="ssid"
#  - debug: var=usb_stat.stdout
#  - debug: var=wifi_stat.stdout
  when: check_stats=="yes"  

               
#- debug: var=ansible_distribution_version
#- debug: var=ansible_nodename
#- debug: var=ansible_memtotal_mb
#- debug: var=ansible_lsb.release
#- debug: var=ansible_kernel
#- debug: var=ansible_devices.model
#- debug: var=ansible_device_links.uuids
  

  
#  - shell: "echo -----------Date and Time----------  > /tmp/role.txt" # empty line
#  - shell: "$echo  date >> /tmp/role.txt" 
#    ignore_errors: yes
#  - shell: >
#            "$echo   
#      -  "Username={{ userlog.stdout }}"
#      - "Model={{ version.stdout }}"
#      - "SerialNo={{ serialno.stdout }}"
#      - "Processor={{ processor.stdout }}"
#      - "Architecture = {{ ansible_architecture }}"
#      - "Bios date =  {{ ansible_bios_date }}"
#      - "Ram = {{ ansible_memtotal_mb }}mb"
#      - "Release= {{ ansible_lsb.release }}"
#      - "kernel = {{ ansible_kernel }}"
#      - "swap = {{  ansible_swaptotal_mb }}mb"
#      - "verison = {{ ansible_distribution_version }}"
#      - "hostname = {{ ansible_nodename }}"
#      - "Hdd model = {{ ansible_devices.sda.model }}"
#      - "Hdd size = {{ hdds.stdout }}"
#         >> /home/testansible/ping.txt"




#- debug:  msg="{{ ansible_default_ipv4.address,ansible_distribution_version,facter_os.distro.codename,ansible_user_id ,  \     facter_dmi.board.manufacturer, facter_dmi.board.product, facter_dmi.bios.release_date , facter_networking.hostname,  \ facter_memory.system.total, facter_disks.sda.model ,  facter_disks.sda.size }}"
#- include_vars: vars/main.yml



  
